Go
or: How to win at Scrabble

Patrick Oyarzun

* Me

- 4 years production Go experience (pre-Pivotal)
- Still writing Go almost daily on the side
- Really bad at Scrabble

* Challenger

- Anthropology PhD candidate
- National medical spelling bee finalist
- (Married to me)
- Really good at Scrabble

: This is words like narcoanesthesia or sacroposterior
: What do you do when your spouse is better than you at something?
: Build a robot to play for you and make yourself feel better

* Word Bot Demo

.link https://word-bot.pcfbeta.io

* Scrabble Bot

- Game logic
: Game Logic
: is move XYZ valid
: if so, how many points is it worth?
: this is just a bunch of hand rolled code with lots of unit tests
- Move generation
: Move generation
: what moves are available given a certain board / rack?
: most of the time is spent here
: We'll focus on this bit for the discussion
- Move selection
: Move selection
: which move is 'best'
: for this ai, it's just a greedy approach

* Prior work

A.W. Appel, G.J. Jacobson
*The*world's*fastest*Scrabble*program*
Comm. ACM, 31 (5) (1988), pp. 572-578

S.A. Gordon
*A*faster*Scrabble*move*generation*algorithm*
Software Practice and Experience, 24 (2) (1994), pp. 219-232

Brian Sheppard
*World-championship-caliber*Scrabble*
Artificial Intelligence, Volume 134, Issues 1–2, January 2002, Pages 241-275

* Go

"Go is an open source programming language that makes it easy to build simple, reliable, and efficient software."

    package main

    import "fmt"

    func main() {
    	fmt.Println("Hello, 世界")
    }

* Move generation

Given:

- Tiles on the board
- Tiles on the rack
- A dictionary of valid words

Find:

- All valid moves as quickly as possible

* Brute force attempt

For each cell on the board,
For each possible arrangement of rack tiles,
Both up and down,
Check if that placement is valid

* Game Performance

.image images/chart.png

* Brute force performance

13,699 rack arrangements * 15 * 15 * 2 = 6,164,550 checks! (~4 seconds)
With 1 blank tile: 138,273,300 checks (~3 minutes)
2 blank tiles: 3,114,382,050 checks (~way too long)

We need to go faster

* Constraints

- Dictionary: what letters can be placed adjacent to form a word
- Board: what 'cross-words' can be played off existing tiles
- Rack: what tiles are available on the rack
- A faster implementation could make use of more information to prune the search space.

* Dictionary representation

.image ./images/gaddag.png _ 400

GADDAG for the words 'car' and 'bar'

: We can traverse the tree as we iterate over board cells
: in order to keep track of what letters are valid at any point
: The backward encoding is key to enabling us to use 'anchor-tiles'

* Rack implementation

While iterating over cells, we need to efficiently track which rack tiles
are used and which aren't. The implementation here is a slice of tiles plus
a 7-bitmask to track which are available.

Bitmasks are fast to query and copy.

* Parallel Search

Each anchor cell is searched in parallel with the others.
A coordinator routine waits for all jobs to complete before moving on.

* Performance Benchmarks

.image ./images/benchmarks.png _ 900

* Game Logic

* Primitive Types

.code ../core/tile.go /\/\/ Letter/,/Letter int/
.code ../core/board.go /\/\/ Direction/,/Direction bool/
.code ../core/board.go /\/\/ Score/,/\[\]Letter/

* Methods

.code ../core/tile.go /\/\/ Tile/,/Tile int/
.code ../core/tile.go /\/\/ PointValue/,/^}/

* Compound Types

.code ../core/board.go /\/\/ PlacedTiles/,/^}/
.code ../core/board.go /\/\/ Cell/,/^}/
.code ../core/board.go /\/\/ Board/,/^}/

* Core Scrabble Domain

.code ../core/board.go /func \(b \*Board\) ValidateMove[^{]+/
.code ../core/board.go /func \(b \*Board\) Score[^{]+/
.code ../core/board.go /func \(b \*Board\) PlaceTiles[^{]+/

* Parallel Search

.code ./code/smarty.go /func workerPool/,/^}/

* Parallel Search

.code ./code/smarty.go /func enqueueJobs/,/^}/

* Parallel Search

.code ./code/smarty.go /func consumeJobs/,/^}/

* Move Generation

* HTTP in Go

    func (s Server) ValidateEndpoint(rw http.ResponseWriter, req *http.Request) {
    	var moves MoveRequest
    	err := json.NewDecoder(req.Body).Decode(&moves)
    	if err != nil {
    		http.Error(rw, "JSON parsing failed: "+err.Error(), http.StatusBadRequest)
    		return
    	}

    	output := s.Validate(moves)
    	json.NewEncoder(rw).Encode(output)
    }

* Final product

.image images/final-product.png _ 500

Jan. 6, 2018

* Other Go features I didn't talk about

- Gofmt
- Structural interface satisfaction
- ~100μs garbage collector pauses
- Predictable stack / heap allocation
- Backwards compatibility promise
- Excellent profiling tools
- Built in test runner
- Multiple return values
- Defer keyword
- *No*classes,*generics,*operator*overloading,*macros,*or*pointer*arithmetic*

